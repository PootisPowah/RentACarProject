using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using RentACarProject.Data;
using RentACarProject.Dto;
using RentACarProject.Interfaces;
using RentACarProject.Models;
using System.Linq;

namespace RentACarProject.Repository
{
    public class RentRepository : IRentRepository
    {
        private readonly DataContext _context;

        public RentRepository(DataContext context)
        {
            _context = context;
        }
        

        public ICollection<Rent> GetRents()
        {
            return _context.Rents.OrderBy(r=>r.Id).ToList();
        }

        public Rent GetRent(int customerId, int carId)
        {
            return _context.Rents
        .Include(r => r.Customer)
        .Include(r => r.Car)
        .FirstOrDefault(r => r.CustomerId == customerId && r.CarId == carId);
        }
        public Rent GetByRentId(int rentId)
        {
            var rent = _context.Rents.FirstOrDefault(r => r.Id == rentId);
            return rent; 
        }
        public bool RentExists(int rentId)
        {
            return _context.Rents.Any(r => r.Id == rentId);
        }

        public bool CreateRent(Rent rent, Customer customer, Car car)
        {
            // Check if the customer exists, if not add them
            var existingCustomer = _context.Customers.FirstOrDefault(c => c.Id == customer.Id);
            if (existingCustomer == null)
            {
                _context.Customers.Add(customer);
                _context.SaveChanges(); // Save to ensure customer gets an ID if it's autogenerated
            }
            rent.CustomerId = customer.Id;

            // Check if the car exists, if not add it
            var existingCar = _context.Cars.FirstOrDefault(c => c.Id == car.Id);
            if (existingCar == null)
            {
                _context.Cars.Add(car);
                _context.SaveChanges(); // Save to ensure car gets an ID if it's autogenerated
            }
            rent.CarId = car.Id;

            // Add the rent
            _context.Rents.Add(rent);
            return Save();
        }

        public bool UpdateRent(Rent rent)
        {
            var existingRent = _context.Rents.FirstOrDefault(r => r.Id == rent.Id);
            if (existingRent == null)
            {
                return false;
            }

            // Manually update the properties that are allowed to be updated
            existingRent.StartDate = rent.StartDate;
            existingRent.EndDate = rent.EndDate;
            existingRent.RentPrice = rent.RentPrice;
            existingRent.PickupStreet = rent.PickupStreet;

            return Save();
        }



        public bool DeleteRent(Rent rent)
        {
            
            _context.Rents.Remove(rent);
            return Save();
        }


        public Car GetCarById(int? carId)
        {
            return _context.Cars.FirstOrDefault(c => c.Id == carId);
        }

        public Customer GetCustomerById(int? customerId)
        {
            return _context.Customers.FirstOrDefault(c => c.Id == customerId);
        }
        public bool Save()
        {
            var saved = _context.SaveChanges();
            return saved > 0 ? true : false;
        }

        
    }
}
